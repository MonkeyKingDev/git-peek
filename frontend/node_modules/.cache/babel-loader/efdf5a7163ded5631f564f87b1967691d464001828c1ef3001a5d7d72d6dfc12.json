{"ast":null,"code":"const API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:8000';\nexport async function apiCall(endpoint, method = 'GET', data = null) {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest' // CSRF protection\n    }\n  };\n  if (data && method !== 'GET') {\n    // Sanitize data before sending\n    const sanitizedData = sanitizeObject(data);\n    config.body = JSON.stringify(sanitizedData);\n  }\n  try {\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);\n    }\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      const result = await response.json();\n      return sanitizeObject(result); // Sanitize response data\n    } else {\n      return await response.text();\n    }\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n}\nfunction sanitizeObject(obj) {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n  if (typeof obj === 'string') {\n    return sanitizeString(obj);\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(sanitizeObject);\n  }\n  if (typeof obj === 'object') {\n    const sanitized = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObject(value);\n    }\n    return sanitized;\n  }\n  return obj;\n}\nfunction sanitizeString(str) {\n  // Basic XSS prevention - encode HTML entities\n  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\\//g, '&#x2F;');\n}\nexport function formatDate(dateString) {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n}\nexport function formatNumber(num) {\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  } else if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'K';\n  }\n  return num.toString();\n}","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","apiCall","endpoint","method","data","url","config","headers","sanitizedData","sanitizeObject","body","JSON","stringify","response","fetch","ok","errorData","json","catch","Error","detail","status","statusText","contentType","get","includes","result","text","error","console","obj","undefined","sanitizeString","Array","isArray","map","sanitized","key","value","Object","entries","str","replace","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","formatNumber","num","toFixed","toString"],"sources":["/Users/ayush/Desktop/Projects/github-code-visualise/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = process.env.NODE_ENV === 'production' \n  ? '/api' \n  : 'http://localhost:8000';\n\nexport async function apiCall(endpoint, method = 'GET', data = null) {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  const config = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest', // CSRF protection\n    },\n  };\n\n  if (data && method !== 'GET') {\n    // Sanitize data before sending\n    const sanitizedData = sanitizeObject(data);\n    config.body = JSON.stringify(sanitizedData);\n  }\n\n  try {\n    const response = await fetch(url, config);\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      const result = await response.json();\n      return sanitizeObject(result); // Sanitize response data\n    } else {\n      return await response.text();\n    }\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n}\n\nfunction sanitizeObject(obj) {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  if (typeof obj === 'string') {\n    return sanitizeString(obj);\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(sanitizeObject);\n  }\n\n  if (typeof obj === 'object') {\n    const sanitized = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObject(value);\n    }\n    return sanitized;\n  }\n\n  return obj;\n}\n\nfunction sanitizeString(str) {\n  // Basic XSS prevention - encode HTML entities\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n}\n\nexport function formatDate(dateString) {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n}\n\nexport function formatNumber(num) {\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  } else if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'K';\n  }\n  return num.toString();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}