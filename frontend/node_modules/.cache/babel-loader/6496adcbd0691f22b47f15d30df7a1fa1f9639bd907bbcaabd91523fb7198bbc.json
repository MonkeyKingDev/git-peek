{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\nexport const useSSE = (url, options = {}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const eventSourceRef = useRef(null);\n  const dataRef = useRef({});\n  const optionsRef = useRef(options);\n  const retryCountRef = useRef(0);\n  const maxRetries = 3;\n\n  // Update options ref when options change\n  optionsRef.current = options;\n  const connect = useCallback(() => {\n    // Force close any existing connection\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n    try {\n      const eventSource = new EventSource(url);\n      eventSourceRef.current = eventSource;\n      eventSource.onopen = () => {\n        setIsConnected(true);\n        setError(null);\n        if (optionsRef.current.onOpen) optionsRef.current.onOpen();\n      };\n      eventSource.onmessage = event => {\n        try {\n          const parsedData = JSON.parse(event.data);\n          if (optionsRef.current.onMessage) {\n            optionsRef.current.onMessage(parsedData);\n          }\n\n          // Handle different message types\n          switch (parsedData.type) {\n            case 'progress':\n              if (optionsRef.current.onProgress) {\n                optionsRef.current.onProgress(parsedData);\n              }\n              break;\n            case 'repository':\n              dataRef.current.repository = parsedData.data;\n              setData({\n                ...dataRef.current\n              });\n              break;\n            case 'contributors':\n              dataRef.current.contributors = parsedData.data;\n              setData({\n                ...dataRef.current\n              });\n              break;\n            case 'pull_requests':\n              dataRef.current.pull_requests = parsedData.data;\n              setData({\n                ...dataRef.current\n              });\n              break;\n            case 'commits_chunk':\n              if (!dataRef.current.commits) {\n                dataRef.current.commits = [];\n              }\n              dataRef.current.commits = dataRef.current.commits.concat(parsedData.data);\n              dataRef.current.total_commits = parsedData.total_so_far;\n              setData({\n                ...dataRef.current\n              });\n              break;\n            case 'detailed_commits_chunk':\n              if (!dataRef.current.detailed_commits) {\n                dataRef.current.detailed_commits = [];\n              }\n              dataRef.current.detailed_commits = dataRef.current.detailed_commits.concat(parsedData.data);\n              dataRef.current.total_detailed_commits = parsedData.total_so_far;\n              setData({\n                ...dataRef.current\n              });\n              break;\n            case 'analysis_complete':\n              dataRef.current.analysis = parsedData.data;\n              setData({\n                ...dataRef.current\n              });\n              if (optionsRef.current.onComplete) {\n                optionsRef.current.onComplete(parsedData.data);\n              }\n              break;\n            case 'stream_complete':\n              // Stream finished successfully, close connection\n              setIsConnected(false);\n              if (eventSourceRef.current) {\n                eventSourceRef.current.close();\n                eventSourceRef.current = null;\n              }\n              break;\n            case 'error':\n              setError(parsedData.message);\n              if (optionsRef.current.onError) {\n                optionsRef.current.onError(parsedData.message);\n              }\n              break;\n            default:\n              break;\n          }\n        } catch (parseError) {\n          console.error('Failed to parse SSE data:', parseError);\n          setError('Failed to parse server response');\n        }\n      };\n      eventSource.onerror = event => {\n        setIsConnected(false);\n\n        // Implement retry logic\n        if (retryCountRef.current < maxRetries) {\n          retryCountRef.current += 1;\n          console.log(`Connection failed, retrying (${retryCountRef.current}/${maxRetries})...`);\n\n          // Retry with exponential backoff\n          setTimeout(() => {\n            if (eventSourceRef.current) {\n              eventSourceRef.current.close();\n            }\n            connect();\n          }, 1000 * retryCountRef.current); // 1s, 2s, 3s delays\n\n          setError(`Connection failed, retrying (${retryCountRef.current}/${maxRetries})...`);\n        } else {\n          setError('Connection error occurred after multiple retries');\n          if (optionsRef.current.onError) {\n            optionsRef.current.onError('Connection error occurred after multiple retries');\n          }\n        }\n      };\n    } catch (connectionError) {\n      setError('Failed to establish connection');\n      setIsConnected(false);\n    }\n  }, [url]);\n  const disconnect = useCallback(() => {\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n      setIsConnected(false);\n    }\n  }, []);\n  const reset = useCallback(() => {\n    setData(null);\n    setError(null);\n    dataRef.current = {};\n    retryCountRef.current = 0; // Reset retry count\n  }, []);\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [disconnect]);\n  return {\n    data,\n    error,\n    isConnected,\n    connect,\n    disconnect,\n    reset\n  };\n};\n_s(useSSE, \"nA96MQgMtCUN0WysaEN8+JuJTRs=\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useSSE","url","options","_s","data","setData","error","setError","isConnected","setIsConnected","eventSourceRef","dataRef","optionsRef","retryCountRef","maxRetries","current","connect","close","eventSource","EventSource","onopen","onOpen","onmessage","event","parsedData","JSON","parse","onMessage","type","onProgress","repository","contributors","pull_requests","commits","concat","total_commits","total_so_far","detailed_commits","total_detailed_commits","analysis","onComplete","message","onError","parseError","console","onerror","log","setTimeout","connectionError","disconnect","reset"],"sources":["/Users/ayush/Desktop/Projects/github-code-visualise/frontend/src/hooks/useSSE.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\n\nexport const useSSE = (url, options = {}) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const eventSourceRef = useRef(null);\n  const dataRef = useRef({});\n  const optionsRef = useRef(options);\n  const retryCountRef = useRef(0);\n  const maxRetries = 3;\n  \n  // Update options ref when options change\n  optionsRef.current = options;\n\n  const connect = useCallback(() => {\n    // Force close any existing connection\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n\n    try {\n      const eventSource = new EventSource(url);\n      eventSourceRef.current = eventSource;\n\n      eventSource.onopen = () => {\n        setIsConnected(true);\n        setError(null);\n        if (optionsRef.current.onOpen) optionsRef.current.onOpen();\n      };\n\n      eventSource.onmessage = (event) => {\n        try {\n          const parsedData = JSON.parse(event.data);\n          \n          if (optionsRef.current.onMessage) {\n            optionsRef.current.onMessage(parsedData);\n          }\n\n          // Handle different message types\n          switch (parsedData.type) {\n            case 'progress':\n              if (optionsRef.current.onProgress) {\n                optionsRef.current.onProgress(parsedData);\n              }\n              break;\n              \n            case 'repository':\n              dataRef.current.repository = parsedData.data;\n              setData({ ...dataRef.current });\n              break;\n              \n            case 'contributors':\n              dataRef.current.contributors = parsedData.data;\n              setData({ ...dataRef.current });\n              break;\n              \n            case 'pull_requests':\n              dataRef.current.pull_requests = parsedData.data;\n              setData({ ...dataRef.current });\n              break;\n              \n            case 'commits_chunk':\n              if (!dataRef.current.commits) {\n                dataRef.current.commits = [];\n              }\n              dataRef.current.commits = dataRef.current.commits.concat(parsedData.data);\n              dataRef.current.total_commits = parsedData.total_so_far;\n              setData({ ...dataRef.current });\n              break;\n              \n            case 'detailed_commits_chunk':\n              if (!dataRef.current.detailed_commits) {\n                dataRef.current.detailed_commits = [];\n              }\n              dataRef.current.detailed_commits = dataRef.current.detailed_commits.concat(parsedData.data);\n              dataRef.current.total_detailed_commits = parsedData.total_so_far;\n              setData({ ...dataRef.current });\n              break;\n              \n            case 'analysis_complete':\n              dataRef.current.analysis = parsedData.data;\n              setData({ ...dataRef.current });\n              if (optionsRef.current.onComplete) {\n                optionsRef.current.onComplete(parsedData.data);\n              }\n              break;\n              \n            case 'stream_complete':\n              // Stream finished successfully, close connection\n              setIsConnected(false);\n              if (eventSourceRef.current) {\n                eventSourceRef.current.close();\n                eventSourceRef.current = null;\n              }\n              break;\n              \n            case 'error':\n              setError(parsedData.message);\n              if (optionsRef.current.onError) {\n                optionsRef.current.onError(parsedData.message);\n              }\n              break;\n              \n            default:\n              break;\n          }\n        } catch (parseError) {\n          console.error('Failed to parse SSE data:', parseError);\n          setError('Failed to parse server response');\n        }\n      };\n\n      eventSource.onerror = (event) => {\n        setIsConnected(false);\n        \n        // Implement retry logic\n        if (retryCountRef.current < maxRetries) {\n          retryCountRef.current += 1;\n          console.log(`Connection failed, retrying (${retryCountRef.current}/${maxRetries})...`);\n          \n          // Retry with exponential backoff\n          setTimeout(() => {\n            if (eventSourceRef.current) {\n              eventSourceRef.current.close();\n            }\n            connect();\n          }, 1000 * retryCountRef.current); // 1s, 2s, 3s delays\n          \n          setError(`Connection failed, retrying (${retryCountRef.current}/${maxRetries})...`);\n        } else {\n          setError('Connection error occurred after multiple retries');\n          if (optionsRef.current.onError) {\n            optionsRef.current.onError('Connection error occurred after multiple retries');\n          }\n        }\n      };\n\n    } catch (connectionError) {\n      setError('Failed to establish connection');\n      setIsConnected(false);\n    }\n  }, [url]);\n\n  const disconnect = useCallback(() => {\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n      setIsConnected(false);\n    }\n  }, []);\n\n  const reset = useCallback(() => {\n    setData(null);\n    setError(null);\n    dataRef.current = {};\n    retryCountRef.current = 0; // Reset retry count\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [disconnect]);\n\n  return {\n    data,\n    error,\n    isConnected,\n    connect,\n    disconnect,\n    reset\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}